[{"E:\\Git Repo\\Ofline-Todo-App\\src\\index.js":"1","E:\\Git Repo\\Ofline-Todo-App\\src\\App.js":"2","E:\\Git Repo\\Ofline-Todo-App\\src\\Context\\AppContext.jsx":"3","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoInput.jsx":"4","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoList.jsx":"5","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoItem.jsx":"6","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Navs\\NavBar.jsx":"7","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Hashtag.jsx":"8"},{"size":290,"mtime":1607825162000,"results":"9","hashOfConfig":"10"},{"size":401,"mtime":1607879169322,"results":"11","hashOfConfig":"10"},{"size":2453,"mtime":1608022972695,"results":"12","hashOfConfig":"10"},{"size":1609,"mtime":1608024129913,"results":"13","hashOfConfig":"10"},{"size":2373,"mtime":1607918688741,"results":"14","hashOfConfig":"10"},{"size":2584,"mtime":1607937782690,"results":"15","hashOfConfig":"10"},{"size":1083,"mtime":1607918695188,"results":"16","hashOfConfig":"10"},{"size":1848,"mtime":1608024108196,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"fqk5fg",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"E:\\Git Repo\\Ofline-Todo-App\\src\\index.js",[],["38","39"],"E:\\Git Repo\\Ofline-Todo-App\\src\\App.js",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Context\\AppContext.jsx",["40"],"import React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const AppContext = React.createContext();\nclass AppContextProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    var data1 = localStorage.getItem(\"todolist\")\n    var fromHash = localStorage.getItem(\"hashtag\")\n\n    this.state = {\n      todo: JSON.parse(data1) || [],\n      hashtag: [],\n      set: [],\n      hashSet: JSON.parse(fromHash) || []\n    };\n  }\n\n  updateTodo = todo => {\n    this.setState({ todo });\n  };\n\n  updateLocalStorage = todoList => {\n    localStorage.setItem(\"todolist\", JSON.stringify(todoList));\n  };\n\n  // add todo list\n  addTodo = (title, hashtag) => {\n\n    var hash = title.split(\" \").filter((v) => v.startsWith(\"#\"))\n    let item = {\n      title,\n      id: uuid(),\n      status: false,\n      hashtag: hashtag,\n      tHash:hash\n\n    };\n    const {hashSet} = this.state\n  \n    console.log(hash)\n    this.setState({\n      todo: [...this.state.todo, item],\n      hashSet: [...hashSet,...hash]\n    });\n    console.log(\"lop\" , this.state.hashSet)\n    var hasgData = [...hashSet, ...hash]\n    var hashTo = localStorage.setItem(\"hashtag\", JSON.stringify(hasgData))\n    // var fromHash = JSON.parse(localStorage.getItem(\"hashtag\"))\n\n\n    var data = [...this.state.todo, item]\n    localStorage.setItem(\"todolist\", JSON.stringify(data))\n\n  };\n\n  // delete the selective todo list\n  removeTodo = (id) => {\n    let newData = this.state.todo.filter((item) => item.id !== id);\n    this.updateLocalStorage(newData);\n    this.updateTodo(newData);\n\n  };\n\n  // this function will toggle the todo ? completed : not completed\n  toggleTask = (id) => {\n    let newData = this.state.todo.map((item) =>\n      item.id === id ? { ...item, status: !item.status } : item\n    );\n    this.updateLocalStorage(newData);\n    this.updateTodo(newData);\n  };\n\n  // this function will update the task\n  updateTask = (id, payload) => {\n    let newData = this.state.todo.map((item) =>\n      item.id === id ? { ...payload } : item\n    );\n    this.updateLocalStorage(newData);\n    this.updateTodo(newData);\n  };\n  render() {\n    const { todo,hashSet } = this.state;\n    const { addTodo, removeTodo, toggleTask, updateTask } = this;\n    const value = { todo, addTodo, removeTodo, toggleTask, updateTask ,hashSet };\n    return (\n      <AppContext.Provider value={value}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default AppContextProvider;\n","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoInput.jsx",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoList.jsx",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoItem.jsx",["41"],"import React from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport \"../styles.css\"\nimport \"./Todo.css\"\nimport { TextField ,Typography} from '@material-ui/core';\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false,\n      value: {\n        ...props.item\n      }\n    };\n  }\n  toggleEdit = () => {\n    this.setState({\n      isEdit: !this.state.isEdit\n    });\n  };\n  handleEdit = (e) => {\n    let { name, value: val, type, checked } = e.target;\n    val = type === \"checkbox\" ? checked : val;\n    const { value } = this.state;\n    this.setState({\n      value: { ...value, [name]: val }\n    });\n  };\n  handleUpdate = () => {\n    const { value } = this.state;\n    this.props.update(value.id, value);\n    this.toggleEdit();\n  };\n  render() {\n    const { item, onToggle, onRemove } = this.props;\n    // manage the state locally\n    const { title, status, id,hashtag } = item;\n    const { isEdit, value } = this.state;\n    // ifEdit\n    // return ( <input  )\n    if (isEdit) {\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <TextField\n            style={{ flex: 1 }}\n            onChange={this.handleEdit}\n            name=\"title\"\n            value={value.title}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter') {\n                return (this.handleUpdate())\n              }\n            }}\n          />\n          <IconButton onClick={this.toggleEdit} aria-label=\"delete\" size=\"medium\">\n            <CancelIcon size=\"medium\" color=\"primary\" />\n          </IconButton>\n        </div>\n      );\n    }\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"row\" }} className=\"completedListItem\">\n         {/* <Typography align=\"right\"></Typography> */}\n        <div onClick={() => onToggle(id)} className={status ? \"done\" : \"notdone\"} style={{ flex: 1, \n          textDecoration: \"line-trough\" }}>{title} {hashtag}\n          \n          </div>\n          <br/>\n         \n       \n        <IconButton onClick={() => onRemove(id)} aria-label=\"delete\" size=\"medium\">\n          <DeleteIcon size=\"medium\" color=\"primary\" />\n        </IconButton>\n        {\n          !status && <IconButton onClick={this.toggleEdit} aria-label=\"delete\" size=\"medium\">\n            <EditIcon size=\"medium\" color=\"primary\" />\n          </IconButton>\n        }\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Navs\\NavBar.jsx",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Hashtag.jsx",["42","43","44"],"import React, { Component } from 'react'\r\nimport \"./Todo.css\"\r\nimport { AppContext } from \"../Context/AppContext\";\r\n\r\nclass HashtagView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasht: \"\"\r\n        }\r\n    }\r\n\r\n    allStorage = () => {\r\n\r\n        var values = [],\r\n            keys = Object.keys(localStorage),\r\n            i = keys.length;\r\n\r\n        while (i--) {\r\n            values.push(localStorage.getItem(keys[i]));\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    showHashTags = (hash) => {\r\n        this.setState({\r\n            hasht: hash\r\n        })\r\n        console.log(hash)\r\n    }\r\n\r\n    render() {\r\n        const { todo, hashSet } = this.context\r\n        const { hasht } = this.state\r\n        console.log(todo)\r\n        return (\r\n            <div>\r\n                <h6>#hashtags</h6>\r\n                {hashSet && hashSet.filter(function (item, pos) {\r\n                    return hashSet.indexOf(item) == pos;\r\n                }).map((item) => {\r\n                    return (\r\n                        <button key={item} onClick={() => this.showHashTags(item)} className=\"btnhash\" >{item}</button>\r\n                    )\r\n                })}\r\n                <div>\r\n                    {todo && todo.map((match) => match.tHash.filter((show2) => {\r\n                        if (show2 == hasht) {\r\n\r\n                            return (\r\n                                <div style={{ backgroundColor: \"white\" }} key={match.id}>\r\n                                    <li style={{ alignText: \"left\" }}>{match.title}</li>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    }))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nHashtagView.contextType = AppContext;\r\nexport default HashtagView",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":48,"column":9,"nodeType":"51","messageId":"52","endLine":48,"endColumn":15},{"ruleId":"49","severity":1,"message":"53","line":8,"column":21,"nodeType":"51","messageId":"52","endLine":8,"endColumn":31},{"ruleId":"54","severity":1,"message":"55","line":41,"column":50,"nodeType":"56","messageId":"57","endLine":41,"endColumn":52},{"ruleId":"58","severity":1,"message":"59","line":48,"column":77,"nodeType":"60","messageId":"61","endLine":48,"endColumn":79},{"ruleId":"54","severity":1,"message":"55","line":49,"column":35,"nodeType":"56","messageId":"57","endLine":49,"endColumn":37},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'hashTo' is assigned a value but never used.","Identifier","unusedVar","'Typography' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]