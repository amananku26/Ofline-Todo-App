[{"E:\\Git Repo\\Ofline-Todo-App\\src\\index.js":"1","E:\\Git Repo\\Ofline-Todo-App\\src\\App.js":"2","E:\\Git Repo\\Ofline-Todo-App\\src\\Context\\AppContext.jsx":"3","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoInput.jsx":"4","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoList.jsx":"5","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoItem.jsx":"6","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Navs\\NavBar.jsx":"7","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Hashtag.jsx":"8"},{"size":290,"mtime":1607825162000,"results":"9","hashOfConfig":"10"},{"size":401,"mtime":1607879169322,"results":"11","hashOfConfig":"10"},{"size":1932,"mtime":1607938999240,"results":"12","hashOfConfig":"10"},{"size":1585,"mtime":1607920547936,"results":"13","hashOfConfig":"10"},{"size":2373,"mtime":1607918688741,"results":"14","hashOfConfig":"10"},{"size":2584,"mtime":1607937782690,"results":"15","hashOfConfig":"10"},{"size":1083,"mtime":1607918695188,"results":"16","hashOfConfig":"10"},{"size":1671,"mtime":1607938646519,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"fqk5fg",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"E:\\Git Repo\\Ofline-Todo-App\\src\\index.js",[],["37","38"],"E:\\Git Repo\\Ofline-Todo-App\\src\\App.js",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Context\\AppContext.jsx",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoInput.jsx",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoList.jsx",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\TodoItem.jsx",["39"],"import React from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport \"../styles.css\"\nimport \"./Todo.css\"\nimport { TextField ,Typography} from '@material-ui/core';\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false,\n      value: {\n        ...props.item\n      }\n    };\n  }\n  toggleEdit = () => {\n    this.setState({\n      isEdit: !this.state.isEdit\n    });\n  };\n  handleEdit = (e) => {\n    let { name, value: val, type, checked } = e.target;\n    val = type === \"checkbox\" ? checked : val;\n    const { value } = this.state;\n    this.setState({\n      value: { ...value, [name]: val }\n    });\n  };\n  handleUpdate = () => {\n    const { value } = this.state;\n    this.props.update(value.id, value);\n    this.toggleEdit();\n  };\n  render() {\n    const { item, onToggle, onRemove } = this.props;\n    // manage the state locally\n    const { title, status, id,hashtag } = item;\n    const { isEdit, value } = this.state;\n    // ifEdit\n    // return ( <input  )\n    if (isEdit) {\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <TextField\n            style={{ flex: 1 }}\n            onChange={this.handleEdit}\n            name=\"title\"\n            value={value.title}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter') {\n                return (this.handleUpdate())\n              }\n            }}\n          />\n          <IconButton onClick={this.toggleEdit} aria-label=\"delete\" size=\"medium\">\n            <CancelIcon size=\"medium\" color=\"primary\" />\n          </IconButton>\n        </div>\n      );\n    }\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"row\" }} className=\"completedListItem\">\n         {/* <Typography align=\"right\"></Typography> */}\n        <div onClick={() => onToggle(id)} className={status ? \"done\" : \"notdone\"} style={{ flex: 1, \n          textDecoration: \"line-trough\" }}>{title} {hashtag}\n          \n          </div>\n          <br/>\n         \n       \n        <IconButton onClick={() => onRemove(id)} aria-label=\"delete\" size=\"medium\">\n          <DeleteIcon size=\"medium\" color=\"primary\" />\n        </IconButton>\n        {\n          !status && <IconButton onClick={this.toggleEdit} aria-label=\"delete\" size=\"medium\">\n            <EditIcon size=\"medium\" color=\"primary\" />\n          </IconButton>\n        }\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Navs\\NavBar.jsx",[],"E:\\Git Repo\\Ofline-Todo-App\\src\\Components\\Hashtag.jsx",["40"],"import React, { Component } from 'react'\r\nimport \"./Todo.css\"\r\nimport { AppContext } from \"../Context/AppContext\";\r\n\r\nclass HashtagView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasht: \"\"\r\n        }\r\n    }\r\n\r\n    allStorage = () => {\r\n\r\n        var values = [],\r\n            keys = Object.keys(localStorage),\r\n            i = keys.length;\r\n\r\n        while (i--) {\r\n            values.push(localStorage.getItem(keys[i]));\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    showHashTags = (hash) => {\r\n        this.setState({\r\n            hasht: hash\r\n        })\r\n        console.log(hash)\r\n    }\r\n\r\n    render() {\r\n        const {todo} = this.context\r\n        const { hasht } = this.state\r\n        console.log(hasht)\r\n        return (\r\n            <div>\r\n                <h6>#hashtags</h6>\r\n                {todo && todo.map((item) => {\r\n                    return (\r\n                        <button key={item.id} onClick={() => this.showHashTags(item.hashtag)} className=\"btnhash\" >{item.hashtag}</button>\r\n                    )\r\n                })}\r\n                <div>\r\n                    {todo && todo.filter((match)=> match.hashtag == hasht).map((show) => {\r\n                            return (\r\n                                <div style={{ backgroundColor: \"white\" }} key={show.id}>\r\n                                    <li style={{alignText:\"left\"}}>{show.title}</li>\r\n                                </div>\r\n                            )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nHashtagView.contextType = AppContext;\r\nexport default HashtagView",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":8,"column":21,"nodeType":"47","messageId":"48","endLine":8,"endColumn":31},{"ruleId":"49","severity":1,"message":"50","line":46,"column":66,"nodeType":"51","messageId":"52","endLine":46,"endColumn":68},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]